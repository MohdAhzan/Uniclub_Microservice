// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: pkg/pb/inv-svc.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Category messages
type AddCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
}

func (x *AddCategoryReq) Reset() {
	*x = AddCategoryReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCategoryReq) ProtoMessage() {}

func (x *AddCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCategoryReq.ProtoReflect.Descriptor instead.
func (*AddCategoryReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{0}
}

func (x *AddCategoryReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

type AddCategoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category *Category `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Message  string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddCategoryRes) Reset() {
	*x = AddCategoryRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCategoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCategoryRes) ProtoMessage() {}

func (x *AddCategoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCategoryRes.ProtoReflect.Descriptor instead.
func (*AddCategoryRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{1}
}

func (x *AddCategoryRes) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *AddCategoryRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCategoriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCategoriesReq) Reset() {
	*x = GetCategoriesReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesReq) ProtoMessage() {}

func (x *GetCategoriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesReq.ProtoReflect.Descriptor instead.
func (*GetCategoriesReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{2}
}

type GetCategoriesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetCategoriesRes) Reset() {
	*x = GetCategoriesRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoriesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesRes) ProtoMessage() {}

func (x *GetCategoriesRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesRes.ProtoReflect.Descriptor instead.
func (*GetCategoriesRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{3}
}

func (x *GetCategoriesRes) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type UpdateCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentCategoryName string `protobuf:"bytes,1,opt,name=current_category_name,json=currentCategoryName,proto3" json:"current_category_name,omitempty"`
	NewCategoryName     string `protobuf:"bytes,2,opt,name=new_category_name,json=newCategoryName,proto3" json:"new_category_name,omitempty"`
}

func (x *UpdateCategoryReq) Reset() {
	*x = UpdateCategoryReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryReq) ProtoMessage() {}

func (x *UpdateCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateCategoryReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCategoryReq) GetCurrentCategoryName() string {
	if x != nil {
		return x.CurrentCategoryName
	}
	return ""
}

func (x *UpdateCategoryReq) GetNewCategoryName() string {
	if x != nil {
		return x.NewCategoryName
	}
	return ""
}

type UpdateCategoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category *Category `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Message  string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateCategoryRes) Reset() {
	*x = UpdateCategoryRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCategoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryRes) ProtoMessage() {}

func (x *UpdateCategoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryRes.ProtoReflect.Descriptor instead.
func (*UpdateCategoryRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCategoryRes) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UpdateCategoryRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *DeleteCategoryReq) Reset() {
	*x = DeleteCategoryReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryReq) ProtoMessage() {}

func (x *DeleteCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteCategoryReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCategoryReq) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type DeleteCategoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteCategoryRes) Reset() {
	*x = DeleteCategoryRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCategoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryRes) ProtoMessage() {}

func (x *DeleteCategoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryRes.ProtoReflect.Descriptor instead.
func (*DeleteCategoryRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCategoryRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryName string `protobuf:"bytes,2,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{8}
}

func (x *Category) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

// Offer messaeges
type AddCategoryOfferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId   int32   `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	OfferName    string  `protobuf:"bytes,2,opt,name=offer_name,json=offerName,proto3" json:"offer_name,omitempty"`
	DiscountRate float64 `protobuf:"fixed64,3,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
	ValidTill    string  `protobuf:"bytes,4,opt,name=valid_till,json=validTill,proto3" json:"valid_till,omitempty"`
}

func (x *AddCategoryOfferReq) Reset() {
	*x = AddCategoryOfferReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCategoryOfferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCategoryOfferReq) ProtoMessage() {}

func (x *AddCategoryOfferReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCategoryOfferReq.ProtoReflect.Descriptor instead.
func (*AddCategoryOfferReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{9}
}

func (x *AddCategoryOfferReq) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *AddCategoryOfferReq) GetOfferName() string {
	if x != nil {
		return x.OfferName
	}
	return ""
}

func (x *AddCategoryOfferReq) GetDiscountRate() float64 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *AddCategoryOfferReq) GetValidTill() string {
	if x != nil {
		return x.ValidTill
	}
	return ""
}

type AddCategoryOfferRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddCategoryOfferRes) Reset() {
	*x = AddCategoryOfferRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCategoryOfferRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCategoryOfferRes) ProtoMessage() {}

func (x *AddCategoryOfferRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCategoryOfferRes.ProtoReflect.Descriptor instead.
func (*AddCategoryOfferRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{10}
}

func (x *AddCategoryOfferRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAllCategoryOffersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllCategoryOffersReq) Reset() {
	*x = GetAllCategoryOffersReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllCategoryOffersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCategoryOffersReq) ProtoMessage() {}

func (x *GetAllCategoryOffersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCategoryOffersReq.ProtoReflect.Descriptor instead.
func (*GetAllCategoryOffersReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{11}
}

type GetAllCategoryOffersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryOffers []*CategoryOffer `protobuf:"bytes,1,rep,name=category_offers,json=categoryOffers,proto3" json:"category_offers,omitempty"`
}

func (x *GetAllCategoryOffersRes) Reset() {
	*x = GetAllCategoryOffersRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllCategoryOffersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCategoryOffersRes) ProtoMessage() {}

func (x *GetAllCategoryOffersRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCategoryOffersRes.ProtoReflect.Descriptor instead.
func (*GetAllCategoryOffersRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{12}
}

func (x *GetAllCategoryOffersRes) GetCategoryOffers() []*CategoryOffer {
	if x != nil {
		return x.CategoryOffers
	}
	return nil
}

type EditCategoryOfferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDiscount float32 `protobuf:"fixed32,1,opt,name=new_discount,json=newDiscount,proto3" json:"new_discount,omitempty"`
	CategoryId  int32   `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *EditCategoryOfferReq) Reset() {
	*x = EditCategoryOfferReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditCategoryOfferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCategoryOfferReq) ProtoMessage() {}

func (x *EditCategoryOfferReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCategoryOfferReq.ProtoReflect.Descriptor instead.
func (*EditCategoryOfferReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{13}
}

func (x *EditCategoryOfferReq) GetNewDiscount() float32 {
	if x != nil {
		return x.NewDiscount
	}
	return 0
}

func (x *EditCategoryOfferReq) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type EditCategoryOfferRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EditCategoryOfferRes) Reset() {
	*x = EditCategoryOfferRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditCategoryOfferRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCategoryOfferRes) ProtoMessage() {}

func (x *EditCategoryOfferRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCategoryOfferRes.ProtoReflect.Descriptor instead.
func (*EditCategoryOfferRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{14}
}

func (x *EditCategoryOfferRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ValidorInvalidCategoryOffersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     bool  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	CategoryId int32 `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *ValidorInvalidCategoryOffersReq) Reset() {
	*x = ValidorInvalidCategoryOffersReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidorInvalidCategoryOffersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidorInvalidCategoryOffersReq) ProtoMessage() {}

func (x *ValidorInvalidCategoryOffersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidorInvalidCategoryOffersReq.ProtoReflect.Descriptor instead.
func (*ValidorInvalidCategoryOffersReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{15}
}

func (x *ValidorInvalidCategoryOffersReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ValidorInvalidCategoryOffersReq) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type ValidorInvalidCategoryOffersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ValidorInvalidCategoryOffersRes) Reset() {
	*x = ValidorInvalidCategoryOffersRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidorInvalidCategoryOffersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidorInvalidCategoryOffersRes) ProtoMessage() {}

func (x *ValidorInvalidCategoryOffersRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidorInvalidCategoryOffersRes.ProtoReflect.Descriptor instead.
func (*ValidorInvalidCategoryOffersRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{16}
}

func (x *ValidorInvalidCategoryOffersRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AddInventoryOfferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryId  int32   `protobuf:"varint,1,opt,name=inventory_id,json=inventoryId,proto3" json:"inventory_id,omitempty"`
	OfferName    string  `protobuf:"bytes,2,opt,name=offer_name,json=offerName,proto3" json:"offer_name,omitempty"`
	DiscountRate float64 `protobuf:"fixed64,3,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
	ValidTill    string  `protobuf:"bytes,4,opt,name=valid_till,json=validTill,proto3" json:"valid_till,omitempty"`
}

func (x *AddInventoryOfferReq) Reset() {
	*x = AddInventoryOfferReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInventoryOfferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInventoryOfferReq) ProtoMessage() {}

func (x *AddInventoryOfferReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInventoryOfferReq.ProtoReflect.Descriptor instead.
func (*AddInventoryOfferReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{17}
}

func (x *AddInventoryOfferReq) GetInventoryId() int32 {
	if x != nil {
		return x.InventoryId
	}
	return 0
}

func (x *AddInventoryOfferReq) GetOfferName() string {
	if x != nil {
		return x.OfferName
	}
	return ""
}

func (x *AddInventoryOfferReq) GetDiscountRate() float64 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *AddInventoryOfferReq) GetValidTill() string {
	if x != nil {
		return x.ValidTill
	}
	return ""
}

type AddInventoryOfferRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddInventoryOfferRes) Reset() {
	*x = AddInventoryOfferRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInventoryOfferRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInventoryOfferRes) ProtoMessage() {}

func (x *AddInventoryOfferRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInventoryOfferRes.ProtoReflect.Descriptor instead.
func (*AddInventoryOfferRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{18}
}

func (x *AddInventoryOfferRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetInventoryOffersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInventoryOffersReq) Reset() {
	*x = GetInventoryOffersReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInventoryOffersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryOffersReq) ProtoMessage() {}

func (x *GetInventoryOffersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryOffersReq.ProtoReflect.Descriptor instead.
func (*GetInventoryOffersReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{19}
}

type GetInventoryOffersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryOffers []*InventoryOffer `protobuf:"bytes,1,rep,name=inventory_offers,json=inventoryOffers,proto3" json:"inventory_offers,omitempty"`
}

func (x *GetInventoryOffersRes) Reset() {
	*x = GetInventoryOffersRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInventoryOffersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryOffersRes) ProtoMessage() {}

func (x *GetInventoryOffersRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryOffersRes.ProtoReflect.Descriptor instead.
func (*GetInventoryOffersRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{20}
}

func (x *GetInventoryOffersRes) GetInventoryOffers() []*InventoryOffer {
	if x != nil {
		return x.InventoryOffers
	}
	return nil
}

type EditInventoryOfferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDiscount float32 `protobuf:"fixed32,1,opt,name=new_discount,json=newDiscount,proto3" json:"new_discount,omitempty"`
	InventoryId int32   `protobuf:"varint,2,opt,name=inventory_id,json=inventoryId,proto3" json:"inventory_id,omitempty"`
}

func (x *EditInventoryOfferReq) Reset() {
	*x = EditInventoryOfferReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditInventoryOfferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditInventoryOfferReq) ProtoMessage() {}

func (x *EditInventoryOfferReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditInventoryOfferReq.ProtoReflect.Descriptor instead.
func (*EditInventoryOfferReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{21}
}

func (x *EditInventoryOfferReq) GetNewDiscount() float32 {
	if x != nil {
		return x.NewDiscount
	}
	return 0
}

func (x *EditInventoryOfferReq) GetInventoryId() int32 {
	if x != nil {
		return x.InventoryId
	}
	return 0
}

type EditInventoryOfferRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EditInventoryOfferRes) Reset() {
	*x = EditInventoryOfferRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditInventoryOfferRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditInventoryOfferRes) ProtoMessage() {}

func (x *EditInventoryOfferRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditInventoryOfferRes.ProtoReflect.Descriptor instead.
func (*EditInventoryOfferRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{22}
}

func (x *EditInventoryOfferRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ValidorInvalidInventoryOffersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	InventoryId int32 `protobuf:"varint,2,opt,name=inventory_id,json=inventoryId,proto3" json:"inventory_id,omitempty"`
}

func (x *ValidorInvalidInventoryOffersReq) Reset() {
	*x = ValidorInvalidInventoryOffersReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidorInvalidInventoryOffersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidorInvalidInventoryOffersReq) ProtoMessage() {}

func (x *ValidorInvalidInventoryOffersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidorInvalidInventoryOffersReq.ProtoReflect.Descriptor instead.
func (*ValidorInvalidInventoryOffersReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{23}
}

func (x *ValidorInvalidInventoryOffersReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ValidorInvalidInventoryOffersReq) GetInventoryId() int32 {
	if x != nil {
		return x.InventoryId
	}
	return 0
}

type ValidorInvalidInventoryOffersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ValidorInvalidInventoryOffersRes) Reset() {
	*x = ValidorInvalidInventoryOffersRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidorInvalidInventoryOffersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidorInvalidInventoryOffersRes) ProtoMessage() {}

func (x *ValidorInvalidInventoryOffersRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidorInvalidInventoryOffersRes.ProtoReflect.Descriptor instead.
func (*ValidorInvalidInventoryOffersRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{24}
}

func (x *ValidorInvalidInventoryOffersRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CategoryOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId   uint32  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	OfferName    string  `protobuf:"bytes,3,opt,name=offer_name,json=offerName,proto3" json:"offer_name,omitempty"`
	DiscountRate float64 `protobuf:"fixed64,4,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
	CreatedAt    string  `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ValidTill    string  `protobuf:"bytes,6,opt,name=valid_till,json=validTill,proto3" json:"valid_till,omitempty"`
	IsActive     bool    `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *CategoryOffer) Reset() {
	*x = CategoryOffer{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryOffer) ProtoMessage() {}

func (x *CategoryOffer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryOffer.ProtoReflect.Descriptor instead.
func (*CategoryOffer) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{25}
}

func (x *CategoryOffer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryOffer) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CategoryOffer) GetOfferName() string {
	if x != nil {
		return x.OfferName
	}
	return ""
}

func (x *CategoryOffer) GetDiscountRate() float64 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *CategoryOffer) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CategoryOffer) GetValidTill() string {
	if x != nil {
		return x.ValidTill
	}
	return ""
}

func (x *CategoryOffer) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type InventoryOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InventoryId  uint32  `protobuf:"varint,2,opt,name=inventory_id,json=inventoryId,proto3" json:"inventory_id,omitempty"`
	ProductName  string  `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	OfferName    string  `protobuf:"bytes,4,opt,name=offer_name,json=offerName,proto3" json:"offer_name,omitempty"`
	DiscountRate float64 `protobuf:"fixed64,5,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
	CreatedAt    string  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ValidTill    string  `protobuf:"bytes,7,opt,name=valid_till,json=validTill,proto3" json:"valid_till,omitempty"`
	IsActive     bool    `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *InventoryOffer) Reset() {
	*x = InventoryOffer{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryOffer) ProtoMessage() {}

func (x *InventoryOffer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryOffer.ProtoReflect.Descriptor instead.
func (*InventoryOffer) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{26}
}

func (x *InventoryOffer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InventoryOffer) GetInventoryId() uint32 {
	if x != nil {
		return x.InventoryId
	}
	return 0
}

func (x *InventoryOffer) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *InventoryOffer) GetOfferName() string {
	if x != nil {
		return x.OfferName
	}
	return ""
}

func (x *InventoryOffer) GetDiscountRate() float64 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *InventoryOffer) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *InventoryOffer) GetValidTill() string {
	if x != nil {
		return x.ValidTill
	}
	return ""
}

func (x *InventoryOffer) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId           uint32  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CategoryId          int32   `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	ProductName         string  `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Image               string  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Size                string  `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`
	Stock               int32   `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`
	Price               float64 `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	IfPresentAtWishlist bool    `protobuf:"varint,8,opt,name=if_present_at_wishlist,json=ifPresentAtWishlist,proto3" json:"if_present_at_wishlist,omitempty"`
	IfPresentAtCart     bool    `protobuf:"varint,9,opt,name=if_present_at_cart,json=ifPresentAtCart,proto3" json:"if_present_at_cart,omitempty"`
	CategoryOffer       string  `protobuf:"bytes,10,opt,name=category_offer,json=categoryOffer,proto3" json:"category_offer,omitempty"`
	ProductOffer        string  `protobuf:"bytes,11,opt,name=product_offer,json=productOffer,proto3" json:"product_offer,omitempty"`
	DiscountedPrice     float64 `protobuf:"fixed64,12,opt,name=discounted_price,json=discountedPrice,proto3" json:"discounted_price,omitempty"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{27}
}

func (x *Inventory) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Inventory) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Inventory) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Inventory) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Inventory) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Inventory) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *Inventory) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Inventory) GetIfPresentAtWishlist() bool {
	if x != nil {
		return x.IfPresentAtWishlist
	}
	return false
}

func (x *Inventory) GetIfPresentAtCart() bool {
	if x != nil {
		return x.IfPresentAtCart
	}
	return false
}

func (x *Inventory) GetCategoryOffer() string {
	if x != nil {
		return x.CategoryOffer
	}
	return ""
}

func (x *Inventory) GetProductOffer() string {
	if x != nil {
		return x.ProductOffer
	}
	return ""
}

func (x *Inventory) GetDiscountedPrice() float64 {
	if x != nil {
		return x.DiscountedPrice
	}
	return 0
}

type AddInventoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   uint32  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CategoryId  int32   `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	ProductName string  `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Size        string  `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Stock       int32   `protobuf:"varint,5,opt,name=stock,proto3" json:"stock,omitempty"`
	Price       float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Image       []byte  `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *AddInventoryReq) Reset() {
	*x = AddInventoryReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInventoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInventoryReq) ProtoMessage() {}

func (x *AddInventoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInventoryReq.ProtoReflect.Descriptor instead.
func (*AddInventoryReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{28}
}

func (x *AddInventoryReq) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddInventoryReq) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *AddInventoryReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AddInventoryReq) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *AddInventoryReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *AddInventoryReq) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddInventoryReq) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type AddInventoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId uint32 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Stock     string `protobuf:"bytes,2,opt,name=stock,proto3" json:"stock,omitempty"`
}

func (x *AddInventoryRes) Reset() {
	*x = AddInventoryRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInventoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInventoryRes) ProtoMessage() {}

func (x *AddInventoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInventoryRes.ProtoReflect.Descriptor instead.
func (*AddInventoryRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{29}
}

func (x *AddInventoryRes) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddInventoryRes) GetStock() string {
	if x != nil {
		return x.Stock
	}
	return ""
}

type GetProductsForAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProductsForAdminReq) Reset() {
	*x = GetProductsForAdminReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProductsForAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsForAdminReq) ProtoMessage() {}

func (x *GetProductsForAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsForAdminReq.ProtoReflect.Descriptor instead.
func (*GetProductsForAdminReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{30}
}

type GetProductsForAdminRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inventories []*Inventory `protobuf:"bytes,1,rep,name=inventories,proto3" json:"inventories,omitempty"`
}

func (x *GetProductsForAdminRes) Reset() {
	*x = GetProductsForAdminRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProductsForAdminRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsForAdminRes) ProtoMessage() {}

func (x *GetProductsForAdminRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsForAdminRes.ProtoReflect.Descriptor instead.
func (*GetProductsForAdminRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{31}
}

func (x *GetProductsForAdminRes) GetInventories() []*Inventory {
	if x != nil {
		return x.Inventories
	}
	return nil
}

type GetProductsForUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProductsForUsersReq) Reset() {
	*x = GetProductsForUsersReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProductsForUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsForUsersReq) ProtoMessage() {}

func (x *GetProductsForUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsForUsersReq.ProtoReflect.Descriptor instead.
func (*GetProductsForUsersReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{32}
}

type GetProductsForUsersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inventories []*Inventory `protobuf:"bytes,1,rep,name=inventories,proto3" json:"inventories,omitempty"`
}

func (x *GetProductsForUsersRes) Reset() {
	*x = GetProductsForUsersRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProductsForUsersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsForUsersRes) ProtoMessage() {}

func (x *GetProductsForUsersRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsForUsersRes.ProtoReflect.Descriptor instead.
func (*GetProductsForUsersRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{33}
}

func (x *GetProductsForUsersRes) GetInventories() []*Inventory {
	if x != nil {
		return x.Inventories
	}
	return nil
}

type DeleteInventoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int32 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *DeleteInventoryReq) Reset() {
	*x = DeleteInventoryReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInventoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInventoryReq) ProtoMessage() {}

func (x *DeleteInventoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInventoryReq.ProtoReflect.Descriptor instead.
func (*DeleteInventoryReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteInventoryReq) GetProductId() int32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type DeleteInventoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteInventoryRes) Reset() {
	*x = DeleteInventoryRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInventoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInventoryRes) ProtoMessage() {}

func (x *DeleteInventoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInventoryRes.ProtoReflect.Descriptor instead.
func (*DeleteInventoryRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteInventoryRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EditInventoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   int32   `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CategoryId  int32   `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	ProductName string  `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Size        string  `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Stock       int32   `protobuf:"varint,5,opt,name=stock,proto3" json:"stock,omitempty"`
	Price       float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *EditInventoryReq) Reset() {
	*x = EditInventoryReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditInventoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditInventoryReq) ProtoMessage() {}

func (x *EditInventoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditInventoryReq.ProtoReflect.Descriptor instead.
func (*EditInventoryReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{36}
}

func (x *EditInventoryReq) GetProductId() int32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *EditInventoryReq) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *EditInventoryReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *EditInventoryReq) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *EditInventoryReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *EditInventoryReq) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type EditInventoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EditInventoryRes) Reset() {
	*x = EditInventoryRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditInventoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditInventoryRes) ProtoMessage() {}

func (x *EditInventoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditInventoryRes.ProtoReflect.Descriptor instead.
func (*EditInventoryRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{37}
}

func (x *EditInventoryRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SearchProductsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName string `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
}

func (x *SearchProductsReq) Reset() {
	*x = SearchProductsReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchProductsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProductsReq) ProtoMessage() {}

func (x *SearchProductsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProductsReq.ProtoReflect.Descriptor instead.
func (*SearchProductsReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{38}
}

func (x *SearchProductsReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

type SearchProductsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inventories []*Inventory `protobuf:"bytes,1,rep,name=inventories,proto3" json:"inventories,omitempty"`
}

func (x *SearchProductsRes) Reset() {
	*x = SearchProductsRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchProductsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProductsRes) ProtoMessage() {}

func (x *SearchProductsRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProductsRes.ProtoReflect.Descriptor instead.
func (*SearchProductsRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{39}
}

func (x *SearchProductsRes) GetInventories() []*Inventory {
	if x != nil {
		return x.Inventories
	}
	return nil
}

// coupon rpc messages
type CreateNewCouponReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponCode   string `protobuf:"bytes,1,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty"`
	DiscountRate int32  `protobuf:"varint,2,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
	ValidTill    string `protobuf:"bytes,3,opt,name=valid_till,json=validTill,proto3" json:"valid_till,omitempty"`
}

func (x *CreateNewCouponReq) Reset() {
	*x = CreateNewCouponReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewCouponReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewCouponReq) ProtoMessage() {}

func (x *CreateNewCouponReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewCouponReq.ProtoReflect.Descriptor instead.
func (*CreateNewCouponReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{40}
}

func (x *CreateNewCouponReq) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *CreateNewCouponReq) GetDiscountRate() int32 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *CreateNewCouponReq) GetValidTill() string {
	if x != nil {
		return x.ValidTill
	}
	return ""
}

type CreateNewCouponRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateNewCouponRes) Reset() {
	*x = CreateNewCouponRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewCouponRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewCouponRes) ProtoMessage() {}

func (x *CreateNewCouponRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewCouponRes.ProtoReflect.Descriptor instead.
func (*CreateNewCouponRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{41}
}

func (x *CreateNewCouponRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAllCouponsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllCouponsReq) Reset() {
	*x = GetAllCouponsReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllCouponsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCouponsReq) ProtoMessage() {}

func (x *GetAllCouponsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCouponsReq.ProtoReflect.Descriptor instead.
func (*GetAllCouponsReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{42}
}

type GetAllCouponsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coupons []*Coupon `protobuf:"bytes,1,rep,name=coupons,proto3" json:"coupons,omitempty"`
}

func (x *GetAllCouponsRes) Reset() {
	*x = GetAllCouponsRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllCouponsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCouponsRes) ProtoMessage() {}

func (x *GetAllCouponsRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCouponsRes.ProtoReflect.Descriptor instead.
func (*GetAllCouponsRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{43}
}

func (x *GetAllCouponsRes) GetCoupons() []*Coupon {
	if x != nil {
		return x.Coupons
	}
	return nil
}

type MakeCouponInvalidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponId int32 `protobuf:"varint,1,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`
}

func (x *MakeCouponInvalidReq) Reset() {
	*x = MakeCouponInvalidReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeCouponInvalidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCouponInvalidReq) ProtoMessage() {}

func (x *MakeCouponInvalidReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCouponInvalidReq.ProtoReflect.Descriptor instead.
func (*MakeCouponInvalidReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{44}
}

func (x *MakeCouponInvalidReq) GetCouponId() int32 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

type MakeCouponInvalidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MakeCouponInvalidRes) Reset() {
	*x = MakeCouponInvalidRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeCouponInvalidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCouponInvalidRes) ProtoMessage() {}

func (x *MakeCouponInvalidRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCouponInvalidRes.ProtoReflect.Descriptor instead.
func (*MakeCouponInvalidRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{45}
}

func (x *MakeCouponInvalidRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MakeCouponValidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponId int32 `protobuf:"varint,1,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`
}

func (x *MakeCouponValidReq) Reset() {
	*x = MakeCouponValidReq{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeCouponValidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCouponValidReq) ProtoMessage() {}

func (x *MakeCouponValidReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCouponValidReq.ProtoReflect.Descriptor instead.
func (*MakeCouponValidReq) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{46}
}

func (x *MakeCouponValidReq) GetCouponId() int32 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

type MakeCouponValidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MakeCouponValidRes) Reset() {
	*x = MakeCouponValidRes{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeCouponValidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCouponValidRes) ProtoMessage() {}

func (x *MakeCouponValidRes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCouponValidRes.ProtoReflect.Descriptor instead.
func (*MakeCouponValidRes) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{47}
}

func (x *MakeCouponValidRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Coupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponCode   string `protobuf:"bytes,1,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty"`
	DiscountRate int32  `protobuf:"varint,2,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
	ValidTill    string `protobuf:"bytes,3,opt,name=valid_till,json=validTill,proto3" json:"valid_till,omitempty"`
}

func (x *Coupon) Reset() {
	*x = Coupon{}
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coupon) ProtoMessage() {}

func (x *Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_inv_svc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coupon.ProtoReflect.Descriptor instead.
func (*Coupon) Descriptor() ([]byte, []int) {
	return file_pkg_pb_inv_svc_proto_rawDescGZIP(), []int{48}
}

func (x *Coupon) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *Coupon) GetDiscountRate() int32 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *Coupon) GetValidTill() string {
	if x != nil {
		return x.ValidTill
	}
	return ""
}

var File_pkg_pb_inv_svc_proto protoreflect.FileDescriptor

var file_pkg_pb_inv_svc_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x76, 0x2d, 0x73, 0x76, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x35, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2d, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x01,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x22, 0x2f, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x5c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x14, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x14, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x5a, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a,
	0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x22, 0x30, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x22, 0x5d, 0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x6f, 0x72,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x6f, 0x72, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x9d, 0x03, 0x0a,
	0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x66, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x66, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x66, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x43, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xca, 0x01, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x50, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x2e,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x11,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74,
	0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x69, 0x6c, 0x6c, 0x22, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x22, 0x33, 0x0a, 0x14, 0x4d, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x14, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x31, 0x0a, 0x12, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69,
	0x6c, 0x6c, 0x32, 0xf7, 0x0e, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x1c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x6f, 0x72, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x79, 0x0a,
	0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x6f, 0x72, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x4d,
	0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1d,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_pb_inv_svc_proto_rawDescOnce sync.Once
	file_pkg_pb_inv_svc_proto_rawDescData = file_pkg_pb_inv_svc_proto_rawDesc
)

func file_pkg_pb_inv_svc_proto_rawDescGZIP() []byte {
	file_pkg_pb_inv_svc_proto_rawDescOnce.Do(func() {
		file_pkg_pb_inv_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_pb_inv_svc_proto_rawDescData)
	})
	return file_pkg_pb_inv_svc_proto_rawDescData
}

var file_pkg_pb_inv_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_pkg_pb_inv_svc_proto_goTypes = []any{
	(*AddCategoryReq)(nil),                   // 0: inventory.AddCategoryReq
	(*AddCategoryRes)(nil),                   // 1: inventory.AddCategoryRes
	(*GetCategoriesReq)(nil),                 // 2: inventory.GetCategoriesReq
	(*GetCategoriesRes)(nil),                 // 3: inventory.GetCategoriesRes
	(*UpdateCategoryReq)(nil),                // 4: inventory.UpdateCategoryReq
	(*UpdateCategoryRes)(nil),                // 5: inventory.UpdateCategoryRes
	(*DeleteCategoryReq)(nil),                // 6: inventory.DeleteCategoryReq
	(*DeleteCategoryRes)(nil),                // 7: inventory.DeleteCategoryRes
	(*Category)(nil),                         // 8: inventory.Category
	(*AddCategoryOfferReq)(nil),              // 9: inventory.AddCategoryOfferReq
	(*AddCategoryOfferRes)(nil),              // 10: inventory.AddCategoryOfferRes
	(*GetAllCategoryOffersReq)(nil),          // 11: inventory.GetAllCategoryOffersReq
	(*GetAllCategoryOffersRes)(nil),          // 12: inventory.GetAllCategoryOffersRes
	(*EditCategoryOfferReq)(nil),             // 13: inventory.EditCategoryOfferReq
	(*EditCategoryOfferRes)(nil),             // 14: inventory.EditCategoryOfferRes
	(*ValidorInvalidCategoryOffersReq)(nil),  // 15: inventory.ValidorInvalidCategoryOffersReq
	(*ValidorInvalidCategoryOffersRes)(nil),  // 16: inventory.ValidorInvalidCategoryOffersRes
	(*AddInventoryOfferReq)(nil),             // 17: inventory.AddInventoryOfferReq
	(*AddInventoryOfferRes)(nil),             // 18: inventory.AddInventoryOfferRes
	(*GetInventoryOffersReq)(nil),            // 19: inventory.GetInventoryOffersReq
	(*GetInventoryOffersRes)(nil),            // 20: inventory.GetInventoryOffersRes
	(*EditInventoryOfferReq)(nil),            // 21: inventory.EditInventoryOfferReq
	(*EditInventoryOfferRes)(nil),            // 22: inventory.EditInventoryOfferRes
	(*ValidorInvalidInventoryOffersReq)(nil), // 23: inventory.ValidorInvalidInventoryOffersReq
	(*ValidorInvalidInventoryOffersRes)(nil), // 24: inventory.ValidorInvalidInventoryOffersRes
	(*CategoryOffer)(nil),                    // 25: inventory.CategoryOffer
	(*InventoryOffer)(nil),                   // 26: inventory.InventoryOffer
	(*Inventory)(nil),                        // 27: inventory.Inventory
	(*AddInventoryReq)(nil),                  // 28: inventory.AddInventoryReq
	(*AddInventoryRes)(nil),                  // 29: inventory.AddInventoryRes
	(*GetProductsForAdminReq)(nil),           // 30: inventory.GetProductsForAdminReq
	(*GetProductsForAdminRes)(nil),           // 31: inventory.GetProductsForAdminRes
	(*GetProductsForUsersReq)(nil),           // 32: inventory.GetProductsForUsersReq
	(*GetProductsForUsersRes)(nil),           // 33: inventory.GetProductsForUsersRes
	(*DeleteInventoryReq)(nil),               // 34: inventory.DeleteInventoryReq
	(*DeleteInventoryRes)(nil),               // 35: inventory.DeleteInventoryRes
	(*EditInventoryReq)(nil),                 // 36: inventory.EditInventoryReq
	(*EditInventoryRes)(nil),                 // 37: inventory.EditInventoryRes
	(*SearchProductsReq)(nil),                // 38: inventory.SearchProductsReq
	(*SearchProductsRes)(nil),                // 39: inventory.SearchProductsRes
	(*CreateNewCouponReq)(nil),               // 40: inventory.CreateNewCouponReq
	(*CreateNewCouponRes)(nil),               // 41: inventory.CreateNewCouponRes
	(*GetAllCouponsReq)(nil),                 // 42: inventory.GetAllCouponsReq
	(*GetAllCouponsRes)(nil),                 // 43: inventory.GetAllCouponsRes
	(*MakeCouponInvalidReq)(nil),             // 44: inventory.MakeCouponInvalidReq
	(*MakeCouponInvalidRes)(nil),             // 45: inventory.MakeCouponInvalidRes
	(*MakeCouponValidReq)(nil),               // 46: inventory.MakeCouponValidReq
	(*MakeCouponValidRes)(nil),               // 47: inventory.MakeCouponValidRes
	(*Coupon)(nil),                           // 48: inventory.Coupon
}
var file_pkg_pb_inv_svc_proto_depIdxs = []int32{
	8,  // 0: inventory.AddCategoryRes.category:type_name -> inventory.Category
	8,  // 1: inventory.GetCategoriesRes.categories:type_name -> inventory.Category
	8,  // 2: inventory.UpdateCategoryRes.category:type_name -> inventory.Category
	25, // 3: inventory.GetAllCategoryOffersRes.category_offers:type_name -> inventory.CategoryOffer
	26, // 4: inventory.GetInventoryOffersRes.inventory_offers:type_name -> inventory.InventoryOffer
	27, // 5: inventory.GetProductsForAdminRes.inventories:type_name -> inventory.Inventory
	27, // 6: inventory.GetProductsForUsersRes.inventories:type_name -> inventory.Inventory
	27, // 7: inventory.SearchProductsRes.inventories:type_name -> inventory.Inventory
	48, // 8: inventory.GetAllCouponsRes.coupons:type_name -> inventory.Coupon
	0,  // 9: inventory.InventoryService.AddCategory:input_type -> inventory.AddCategoryReq
	2,  // 10: inventory.InventoryService.GetCategories:input_type -> inventory.GetCategoriesReq
	4,  // 11: inventory.InventoryService.UpdateCategory:input_type -> inventory.UpdateCategoryReq
	6,  // 12: inventory.InventoryService.DeleteCategory:input_type -> inventory.DeleteCategoryReq
	28, // 13: inventory.InventoryService.AddInventory:input_type -> inventory.AddInventoryReq
	30, // 14: inventory.InventoryService.GetProductsForAdmin:input_type -> inventory.GetProductsForAdminReq
	32, // 15: inventory.InventoryService.GetProductsForUsers:input_type -> inventory.GetProductsForUsersReq
	34, // 16: inventory.InventoryService.DeleteInventory:input_type -> inventory.DeleteInventoryReq
	36, // 17: inventory.InventoryService.EditInventory:input_type -> inventory.EditInventoryReq
	38, // 18: inventory.InventoryService.SearchProducts:input_type -> inventory.SearchProductsReq
	9,  // 19: inventory.InventoryService.AddCategoryOffer:input_type -> inventory.AddCategoryOfferReq
	11, // 20: inventory.InventoryService.GetAllCategoryOffers:input_type -> inventory.GetAllCategoryOffersReq
	13, // 21: inventory.InventoryService.EditCategoryOffer:input_type -> inventory.EditCategoryOfferReq
	15, // 22: inventory.InventoryService.ValidorInvalidCategoryOffers:input_type -> inventory.ValidorInvalidCategoryOffersReq
	17, // 23: inventory.InventoryService.AddInventoryOffer:input_type -> inventory.AddInventoryOfferReq
	19, // 24: inventory.InventoryService.GetInventoryOffers:input_type -> inventory.GetInventoryOffersReq
	21, // 25: inventory.InventoryService.EditInventoryOffer:input_type -> inventory.EditInventoryOfferReq
	23, // 26: inventory.InventoryService.ValidorInvalidInventoryOffers:input_type -> inventory.ValidorInvalidInventoryOffersReq
	40, // 27: inventory.InventoryService.CreateNewCoupon:input_type -> inventory.CreateNewCouponReq
	42, // 28: inventory.InventoryService.GetAllCoupons:input_type -> inventory.GetAllCouponsReq
	44, // 29: inventory.InventoryService.MakeCouponInvalid:input_type -> inventory.MakeCouponInvalidReq
	46, // 30: inventory.InventoryService.MakeCouponValid:input_type -> inventory.MakeCouponValidReq
	1,  // 31: inventory.InventoryService.AddCategory:output_type -> inventory.AddCategoryRes
	3,  // 32: inventory.InventoryService.GetCategories:output_type -> inventory.GetCategoriesRes
	5,  // 33: inventory.InventoryService.UpdateCategory:output_type -> inventory.UpdateCategoryRes
	7,  // 34: inventory.InventoryService.DeleteCategory:output_type -> inventory.DeleteCategoryRes
	29, // 35: inventory.InventoryService.AddInventory:output_type -> inventory.AddInventoryRes
	31, // 36: inventory.InventoryService.GetProductsForAdmin:output_type -> inventory.GetProductsForAdminRes
	33, // 37: inventory.InventoryService.GetProductsForUsers:output_type -> inventory.GetProductsForUsersRes
	35, // 38: inventory.InventoryService.DeleteInventory:output_type -> inventory.DeleteInventoryRes
	37, // 39: inventory.InventoryService.EditInventory:output_type -> inventory.EditInventoryRes
	39, // 40: inventory.InventoryService.SearchProducts:output_type -> inventory.SearchProductsRes
	10, // 41: inventory.InventoryService.AddCategoryOffer:output_type -> inventory.AddCategoryOfferRes
	12, // 42: inventory.InventoryService.GetAllCategoryOffers:output_type -> inventory.GetAllCategoryOffersRes
	14, // 43: inventory.InventoryService.EditCategoryOffer:output_type -> inventory.EditCategoryOfferRes
	16, // 44: inventory.InventoryService.ValidorInvalidCategoryOffers:output_type -> inventory.ValidorInvalidCategoryOffersRes
	18, // 45: inventory.InventoryService.AddInventoryOffer:output_type -> inventory.AddInventoryOfferRes
	20, // 46: inventory.InventoryService.GetInventoryOffers:output_type -> inventory.GetInventoryOffersRes
	22, // 47: inventory.InventoryService.EditInventoryOffer:output_type -> inventory.EditInventoryOfferRes
	24, // 48: inventory.InventoryService.ValidorInvalidInventoryOffers:output_type -> inventory.ValidorInvalidInventoryOffersRes
	41, // 49: inventory.InventoryService.CreateNewCoupon:output_type -> inventory.CreateNewCouponRes
	43, // 50: inventory.InventoryService.GetAllCoupons:output_type -> inventory.GetAllCouponsRes
	45, // 51: inventory.InventoryService.MakeCouponInvalid:output_type -> inventory.MakeCouponInvalidRes
	47, // 52: inventory.InventoryService.MakeCouponValid:output_type -> inventory.MakeCouponValidRes
	31, // [31:53] is the sub-list for method output_type
	9,  // [9:31] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_pb_inv_svc_proto_init() }
func file_pkg_pb_inv_svc_proto_init() {
	if File_pkg_pb_inv_svc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_pb_inv_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_pb_inv_svc_proto_goTypes,
		DependencyIndexes: file_pkg_pb_inv_svc_proto_depIdxs,
		MessageInfos:      file_pkg_pb_inv_svc_proto_msgTypes,
	}.Build()
	File_pkg_pb_inv_svc_proto = out.File
	file_pkg_pb_inv_svc_proto_rawDesc = nil
	file_pkg_pb_inv_svc_proto_goTypes = nil
	file_pkg_pb_inv_svc_proto_depIdxs = nil
}
