// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/pb/inventorysvc/inv-svc.proto

package inventorysvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_AddCategory_FullMethodName                   = "/inventory.InventoryService/AddCategory"
	InventoryService_GetCategories_FullMethodName                 = "/inventory.InventoryService/GetCategories"
	InventoryService_UpdateCategory_FullMethodName                = "/inventory.InventoryService/UpdateCategory"
	InventoryService_DeleteCategory_FullMethodName                = "/inventory.InventoryService/DeleteCategory"
	InventoryService_AddInventory_FullMethodName                  = "/inventory.InventoryService/AddInventory"
	InventoryService_GetProductsForAdmin_FullMethodName           = "/inventory.InventoryService/GetProductsForAdmin"
	InventoryService_GetProductsForUsers_FullMethodName           = "/inventory.InventoryService/GetProductsForUsers"
	InventoryService_DeleteInventory_FullMethodName               = "/inventory.InventoryService/DeleteInventory"
	InventoryService_EditInventory_FullMethodName                 = "/inventory.InventoryService/EditInventory"
	InventoryService_SearchProducts_FullMethodName                = "/inventory.InventoryService/SearchProducts"
	InventoryService_AddCategoryOffer_FullMethodName              = "/inventory.InventoryService/AddCategoryOffer"
	InventoryService_GetAllCategoryOffers_FullMethodName          = "/inventory.InventoryService/GetAllCategoryOffers"
	InventoryService_EditCategoryOffer_FullMethodName             = "/inventory.InventoryService/EditCategoryOffer"
	InventoryService_ValidorInvalidCategoryOffers_FullMethodName  = "/inventory.InventoryService/ValidorInvalidCategoryOffers"
	InventoryService_AddInventoryOffer_FullMethodName             = "/inventory.InventoryService/AddInventoryOffer"
	InventoryService_GetInventoryOffers_FullMethodName            = "/inventory.InventoryService/GetInventoryOffers"
	InventoryService_EditInventoryOffer_FullMethodName            = "/inventory.InventoryService/EditInventoryOffer"
	InventoryService_ValidorInvalidInventoryOffers_FullMethodName = "/inventory.InventoryService/ValidorInvalidInventoryOffers"
	InventoryService_CreateNewCoupon_FullMethodName               = "/inventory.InventoryService/CreateNewCoupon"
	InventoryService_GetAllCoupons_FullMethodName                 = "/inventory.InventoryService/GetAllCoupons"
	InventoryService_MakeCouponInvalid_FullMethodName             = "/inventory.InventoryService/MakeCouponInvalid"
	InventoryService_MakeCouponValid_FullMethodName               = "/inventory.InventoryService/MakeCouponValid"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// Category rpcs
	AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryRes, error)
	GetCategories(ctx context.Context, in *GetCategoriesReq, opts ...grpc.CallOption) (*GetCategoriesRes, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryRes, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryRes, error)
	// Inventory rpcs
	AddInventory(ctx context.Context, in *AddInventoryReq, opts ...grpc.CallOption) (*AddInventoryRes, error)
	GetProductsForAdmin(ctx context.Context, in *GetProductsForAdminReq, opts ...grpc.CallOption) (*GetProductsForAdminRes, error)
	GetProductsForUsers(ctx context.Context, in *GetProductsForUsersReq, opts ...grpc.CallOption) (*GetProductsForUsersRes, error)
	DeleteInventory(ctx context.Context, in *DeleteInventoryReq, opts ...grpc.CallOption) (*DeleteInventoryRes, error)
	EditInventory(ctx context.Context, in *EditInventoryReq, opts ...grpc.CallOption) (*EditInventoryRes, error)
	SearchProducts(ctx context.Context, in *SearchProductsReq, opts ...grpc.CallOption) (*SearchProductsRes, error)
	// Offer rpcs
	AddCategoryOffer(ctx context.Context, in *AddCategoryOfferReq, opts ...grpc.CallOption) (*AddCategoryOfferRes, error)
	GetAllCategoryOffers(ctx context.Context, in *GetAllCategoryOffersReq, opts ...grpc.CallOption) (*GetAllCategoryOffersRes, error)
	EditCategoryOffer(ctx context.Context, in *EditCategoryOfferReq, opts ...grpc.CallOption) (*EditCategoryOfferRes, error)
	ValidorInvalidCategoryOffers(ctx context.Context, in *ValidorInvalidCategoryOffersReq, opts ...grpc.CallOption) (*ValidorInvalidCategoryOffersRes, error)
	AddInventoryOffer(ctx context.Context, in *AddInventoryOfferReq, opts ...grpc.CallOption) (*AddInventoryOfferRes, error)
	GetInventoryOffers(ctx context.Context, in *GetInventoryOffersReq, opts ...grpc.CallOption) (*GetInventoryOffersRes, error)
	EditInventoryOffer(ctx context.Context, in *EditInventoryOfferReq, opts ...grpc.CallOption) (*EditInventoryOfferRes, error)
	ValidorInvalidInventoryOffers(ctx context.Context, in *ValidorInvalidInventoryOffersReq, opts ...grpc.CallOption) (*ValidorInvalidInventoryOffersRes, error)
	// Coupon rpcs
	CreateNewCoupon(ctx context.Context, in *CreateNewCouponReq, opts ...grpc.CallOption) (*CreateNewCouponRes, error)
	GetAllCoupons(ctx context.Context, in *GetAllCouponsReq, opts ...grpc.CallOption) (*GetAllCouponsRes, error)
	MakeCouponInvalid(ctx context.Context, in *MakeCouponInvalidReq, opts ...grpc.CallOption) (*MakeCouponInvalidRes, error)
	MakeCouponValid(ctx context.Context, in *MakeCouponValidReq, opts ...grpc.CallOption) (*MakeCouponValidRes, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCategoryRes)
	err := c.cc.Invoke(ctx, InventoryService_AddCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCategories(ctx context.Context, in *GetCategoriesReq, opts ...grpc.CallOption) (*GetCategoriesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesRes)
	err := c.cc.Invoke(ctx, InventoryService_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCategoryRes)
	err := c.cc.Invoke(ctx, InventoryService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCategoryRes)
	err := c.cc.Invoke(ctx, InventoryService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddInventory(ctx context.Context, in *AddInventoryReq, opts ...grpc.CallOption) (*AddInventoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddInventoryRes)
	err := c.cc.Invoke(ctx, InventoryService_AddInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetProductsForAdmin(ctx context.Context, in *GetProductsForAdminReq, opts ...grpc.CallOption) (*GetProductsForAdminRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsForAdminRes)
	err := c.cc.Invoke(ctx, InventoryService_GetProductsForAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetProductsForUsers(ctx context.Context, in *GetProductsForUsersReq, opts ...grpc.CallOption) (*GetProductsForUsersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsForUsersRes)
	err := c.cc.Invoke(ctx, InventoryService_GetProductsForUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteInventory(ctx context.Context, in *DeleteInventoryReq, opts ...grpc.CallOption) (*DeleteInventoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInventoryRes)
	err := c.cc.Invoke(ctx, InventoryService_DeleteInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) EditInventory(ctx context.Context, in *EditInventoryReq, opts ...grpc.CallOption) (*EditInventoryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditInventoryRes)
	err := c.cc.Invoke(ctx, InventoryService_EditInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) SearchProducts(ctx context.Context, in *SearchProductsReq, opts ...grpc.CallOption) (*SearchProductsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchProductsRes)
	err := c.cc.Invoke(ctx, InventoryService_SearchProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddCategoryOffer(ctx context.Context, in *AddCategoryOfferReq, opts ...grpc.CallOption) (*AddCategoryOfferRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCategoryOfferRes)
	err := c.cc.Invoke(ctx, InventoryService_AddCategoryOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllCategoryOffers(ctx context.Context, in *GetAllCategoryOffersReq, opts ...grpc.CallOption) (*GetAllCategoryOffersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCategoryOffersRes)
	err := c.cc.Invoke(ctx, InventoryService_GetAllCategoryOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) EditCategoryOffer(ctx context.Context, in *EditCategoryOfferReq, opts ...grpc.CallOption) (*EditCategoryOfferRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditCategoryOfferRes)
	err := c.cc.Invoke(ctx, InventoryService_EditCategoryOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ValidorInvalidCategoryOffers(ctx context.Context, in *ValidorInvalidCategoryOffersReq, opts ...grpc.CallOption) (*ValidorInvalidCategoryOffersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidorInvalidCategoryOffersRes)
	err := c.cc.Invoke(ctx, InventoryService_ValidorInvalidCategoryOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddInventoryOffer(ctx context.Context, in *AddInventoryOfferReq, opts ...grpc.CallOption) (*AddInventoryOfferRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddInventoryOfferRes)
	err := c.cc.Invoke(ctx, InventoryService_AddInventoryOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventoryOffers(ctx context.Context, in *GetInventoryOffersReq, opts ...grpc.CallOption) (*GetInventoryOffersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryOffersRes)
	err := c.cc.Invoke(ctx, InventoryService_GetInventoryOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) EditInventoryOffer(ctx context.Context, in *EditInventoryOfferReq, opts ...grpc.CallOption) (*EditInventoryOfferRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditInventoryOfferRes)
	err := c.cc.Invoke(ctx, InventoryService_EditInventoryOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ValidorInvalidInventoryOffers(ctx context.Context, in *ValidorInvalidInventoryOffersReq, opts ...grpc.CallOption) (*ValidorInvalidInventoryOffersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidorInvalidInventoryOffersRes)
	err := c.cc.Invoke(ctx, InventoryService_ValidorInvalidInventoryOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateNewCoupon(ctx context.Context, in *CreateNewCouponReq, opts ...grpc.CallOption) (*CreateNewCouponRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewCouponRes)
	err := c.cc.Invoke(ctx, InventoryService_CreateNewCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllCoupons(ctx context.Context, in *GetAllCouponsReq, opts ...grpc.CallOption) (*GetAllCouponsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCouponsRes)
	err := c.cc.Invoke(ctx, InventoryService_GetAllCoupons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) MakeCouponInvalid(ctx context.Context, in *MakeCouponInvalidReq, opts ...grpc.CallOption) (*MakeCouponInvalidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeCouponInvalidRes)
	err := c.cc.Invoke(ctx, InventoryService_MakeCouponInvalid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) MakeCouponValid(ctx context.Context, in *MakeCouponValidReq, opts ...grpc.CallOption) (*MakeCouponValidRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeCouponValidRes)
	err := c.cc.Invoke(ctx, InventoryService_MakeCouponValid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	// Category rpcs
	AddCategory(context.Context, *AddCategoryReq) (*AddCategoryRes, error)
	GetCategories(context.Context, *GetCategoriesReq) (*GetCategoriesRes, error)
	UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryRes, error)
	DeleteCategory(context.Context, *DeleteCategoryReq) (*DeleteCategoryRes, error)
	// Inventory rpcs
	AddInventory(context.Context, *AddInventoryReq) (*AddInventoryRes, error)
	GetProductsForAdmin(context.Context, *GetProductsForAdminReq) (*GetProductsForAdminRes, error)
	GetProductsForUsers(context.Context, *GetProductsForUsersReq) (*GetProductsForUsersRes, error)
	DeleteInventory(context.Context, *DeleteInventoryReq) (*DeleteInventoryRes, error)
	EditInventory(context.Context, *EditInventoryReq) (*EditInventoryRes, error)
	SearchProducts(context.Context, *SearchProductsReq) (*SearchProductsRes, error)
	// Offer rpcs
	AddCategoryOffer(context.Context, *AddCategoryOfferReq) (*AddCategoryOfferRes, error)
	GetAllCategoryOffers(context.Context, *GetAllCategoryOffersReq) (*GetAllCategoryOffersRes, error)
	EditCategoryOffer(context.Context, *EditCategoryOfferReq) (*EditCategoryOfferRes, error)
	ValidorInvalidCategoryOffers(context.Context, *ValidorInvalidCategoryOffersReq) (*ValidorInvalidCategoryOffersRes, error)
	AddInventoryOffer(context.Context, *AddInventoryOfferReq) (*AddInventoryOfferRes, error)
	GetInventoryOffers(context.Context, *GetInventoryOffersReq) (*GetInventoryOffersRes, error)
	EditInventoryOffer(context.Context, *EditInventoryOfferReq) (*EditInventoryOfferRes, error)
	ValidorInvalidInventoryOffers(context.Context, *ValidorInvalidInventoryOffersReq) (*ValidorInvalidInventoryOffersRes, error)
	// Coupon rpcs
	CreateNewCoupon(context.Context, *CreateNewCouponReq) (*CreateNewCouponRes, error)
	GetAllCoupons(context.Context, *GetAllCouponsReq) (*GetAllCouponsRes, error)
	MakeCouponInvalid(context.Context, *MakeCouponInvalidReq) (*MakeCouponInvalidRes, error)
	MakeCouponValid(context.Context, *MakeCouponValidReq) (*MakeCouponValidRes, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) AddCategory(context.Context, *AddCategoryReq) (*AddCategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedInventoryServiceServer) GetCategories(context.Context, *GetCategoriesReq) (*GetCategoriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteCategory(context.Context, *DeleteCategoryReq) (*DeleteCategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedInventoryServiceServer) AddInventory(context.Context, *AddInventoryReq) (*AddInventoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInventory not implemented")
}
func (UnimplementedInventoryServiceServer) GetProductsForAdmin(context.Context, *GetProductsForAdminReq) (*GetProductsForAdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsForAdmin not implemented")
}
func (UnimplementedInventoryServiceServer) GetProductsForUsers(context.Context, *GetProductsForUsersReq) (*GetProductsForUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsForUsers not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteInventory(context.Context, *DeleteInventoryReq) (*DeleteInventoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInventory not implemented")
}
func (UnimplementedInventoryServiceServer) EditInventory(context.Context, *EditInventoryReq) (*EditInventoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInventory not implemented")
}
func (UnimplementedInventoryServiceServer) SearchProducts(context.Context, *SearchProductsReq) (*SearchProductsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProducts not implemented")
}
func (UnimplementedInventoryServiceServer) AddCategoryOffer(context.Context, *AddCategoryOfferReq) (*AddCategoryOfferRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategoryOffer not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllCategoryOffers(context.Context, *GetAllCategoryOffersReq) (*GetAllCategoryOffersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategoryOffers not implemented")
}
func (UnimplementedInventoryServiceServer) EditCategoryOffer(context.Context, *EditCategoryOfferReq) (*EditCategoryOfferRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCategoryOffer not implemented")
}
func (UnimplementedInventoryServiceServer) ValidorInvalidCategoryOffers(context.Context, *ValidorInvalidCategoryOffersReq) (*ValidorInvalidCategoryOffersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidorInvalidCategoryOffers not implemented")
}
func (UnimplementedInventoryServiceServer) AddInventoryOffer(context.Context, *AddInventoryOfferReq) (*AddInventoryOfferRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInventoryOffer not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventoryOffers(context.Context, *GetInventoryOffersReq) (*GetInventoryOffersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryOffers not implemented")
}
func (UnimplementedInventoryServiceServer) EditInventoryOffer(context.Context, *EditInventoryOfferReq) (*EditInventoryOfferRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInventoryOffer not implemented")
}
func (UnimplementedInventoryServiceServer) ValidorInvalidInventoryOffers(context.Context, *ValidorInvalidInventoryOffersReq) (*ValidorInvalidInventoryOffersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidorInvalidInventoryOffers not implemented")
}
func (UnimplementedInventoryServiceServer) CreateNewCoupon(context.Context, *CreateNewCouponReq) (*CreateNewCouponRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCoupon not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllCoupons(context.Context, *GetAllCouponsReq) (*GetAllCouponsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCoupons not implemented")
}
func (UnimplementedInventoryServiceServer) MakeCouponInvalid(context.Context, *MakeCouponInvalidReq) (*MakeCouponInvalidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCouponInvalid not implemented")
}
func (UnimplementedInventoryServiceServer) MakeCouponValid(context.Context, *MakeCouponValidReq) (*MakeCouponValidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCouponValid not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddCategory(ctx, req.(*AddCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCategories(ctx, req.(*GetCategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddInventory(ctx, req.(*AddInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetProductsForAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsForAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetProductsForAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetProductsForAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetProductsForAdmin(ctx, req.(*GetProductsForAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetProductsForUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsForUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetProductsForUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetProductsForUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetProductsForUsers(ctx, req.(*GetProductsForUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteInventory(ctx, req.(*DeleteInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_EditInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).EditInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_EditInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).EditInventory(ctx, req.(*EditInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_SearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).SearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_SearchProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).SearchProducts(ctx, req.(*SearchProductsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddCategoryOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddCategoryOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddCategoryOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddCategoryOffer(ctx, req.(*AddCategoryOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllCategoryOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCategoryOffersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllCategoryOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetAllCategoryOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllCategoryOffers(ctx, req.(*GetAllCategoryOffersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_EditCategoryOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCategoryOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).EditCategoryOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_EditCategoryOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).EditCategoryOffer(ctx, req.(*EditCategoryOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ValidorInvalidCategoryOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidorInvalidCategoryOffersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ValidorInvalidCategoryOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ValidorInvalidCategoryOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ValidorInvalidCategoryOffers(ctx, req.(*ValidorInvalidCategoryOffersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddInventoryOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInventoryOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddInventoryOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddInventoryOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddInventoryOffer(ctx, req.(*AddInventoryOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventoryOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryOffersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventoryOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventoryOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventoryOffers(ctx, req.(*GetInventoryOffersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_EditInventoryOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInventoryOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).EditInventoryOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_EditInventoryOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).EditInventoryOffer(ctx, req.(*EditInventoryOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ValidorInvalidInventoryOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidorInvalidInventoryOffersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ValidorInvalidInventoryOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ValidorInvalidInventoryOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ValidorInvalidInventoryOffers(ctx, req.(*ValidorInvalidInventoryOffersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateNewCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateNewCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateNewCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateNewCoupon(ctx, req.(*CreateNewCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCouponsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetAllCoupons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllCoupons(ctx, req.(*GetAllCouponsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_MakeCouponInvalid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeCouponInvalidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).MakeCouponInvalid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_MakeCouponInvalid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).MakeCouponInvalid(ctx, req.(*MakeCouponInvalidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_MakeCouponValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeCouponValidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).MakeCouponValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_MakeCouponValid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).MakeCouponValid(ctx, req.(*MakeCouponValidReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCategory",
			Handler:    _InventoryService_AddCategory_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _InventoryService_GetCategories_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _InventoryService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _InventoryService_DeleteCategory_Handler,
		},
		{
			MethodName: "AddInventory",
			Handler:    _InventoryService_AddInventory_Handler,
		},
		{
			MethodName: "GetProductsForAdmin",
			Handler:    _InventoryService_GetProductsForAdmin_Handler,
		},
		{
			MethodName: "GetProductsForUsers",
			Handler:    _InventoryService_GetProductsForUsers_Handler,
		},
		{
			MethodName: "DeleteInventory",
			Handler:    _InventoryService_DeleteInventory_Handler,
		},
		{
			MethodName: "EditInventory",
			Handler:    _InventoryService_EditInventory_Handler,
		},
		{
			MethodName: "SearchProducts",
			Handler:    _InventoryService_SearchProducts_Handler,
		},
		{
			MethodName: "AddCategoryOffer",
			Handler:    _InventoryService_AddCategoryOffer_Handler,
		},
		{
			MethodName: "GetAllCategoryOffers",
			Handler:    _InventoryService_GetAllCategoryOffers_Handler,
		},
		{
			MethodName: "EditCategoryOffer",
			Handler:    _InventoryService_EditCategoryOffer_Handler,
		},
		{
			MethodName: "ValidorInvalidCategoryOffers",
			Handler:    _InventoryService_ValidorInvalidCategoryOffers_Handler,
		},
		{
			MethodName: "AddInventoryOffer",
			Handler:    _InventoryService_AddInventoryOffer_Handler,
		},
		{
			MethodName: "GetInventoryOffers",
			Handler:    _InventoryService_GetInventoryOffers_Handler,
		},
		{
			MethodName: "EditInventoryOffer",
			Handler:    _InventoryService_EditInventoryOffer_Handler,
		},
		{
			MethodName: "ValidorInvalidInventoryOffers",
			Handler:    _InventoryService_ValidorInvalidInventoryOffers_Handler,
		},
		{
			MethodName: "CreateNewCoupon",
			Handler:    _InventoryService_CreateNewCoupon_Handler,
		},
		{
			MethodName: "GetAllCoupons",
			Handler:    _InventoryService_GetAllCoupons_Handler,
		},
		{
			MethodName: "MakeCouponInvalid",
			Handler:    _InventoryService_MakeCouponInvalid_Handler,
		},
		{
			MethodName: "MakeCouponValid",
			Handler:    _InventoryService_MakeCouponValid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/inventorysvc/inv-svc.proto",
}
